[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float skew_y = 0.0;

void fragment() {
	vec2 uv = UV;
	// map to [-0.5, 0.5]
	uv.x = (uv.x - 0.5);
	uv.y = (uv.y - 0.5);
	
	// ratio - how far are currnet point from skew position
	float sy = 1.0 - (uv.y * skew_y);
	
	// calculate z (depth) depending on ratio
	float z = 1.0 + sy / 2.0;
	// correct perspective for given point
	uv.x = uv.x / z;
	uv.y = uv.y / z;
	float scale = 0.8 + abs(skew_y)*0.3;
	uv *= scale;
	// scale a bit down a reset mapping from [-0.5, 0.5] to [0, 1]
	uv.x = uv.x / 0.45 + 0.5;
	uv.y = uv.y / 0.45 + 0.5;
	COLOR = texture(TEXTURE, uv);
	
	// if uv outside texture - then use transparent color
	COLOR.rgb = texture(TEXTURE, uv, 1.0).rgb;
	COLOR.a = texture(TEXTURE, uv, 1.0).a;
	COLOR.a *= 1.0 * step(uv.x,1.0) * step(0.0,uv.x) * step(uv.y,1.0) * step(0.0,uv.y);
}"
